#!/bin/bash -e

echo "   ___      _____               _      ";
echo "  / _ \_   /__   \___  _ __ ___| |__   ";
echo " / /_)/ | | |/ /\/ _ \| '__/ __| '_ \  ";
echo "/ ___/| |_| / / | (_) | | | (__| | | | ";
echo "\/     \__, \/   \___/|_|  \___|_| |_| ";
echo "       |___/                           ";

source /scripts/.env

RESET='\033[0m'
COLOR='\033[1;32m'

msg() {
  echo -e "${COLOR}$(date): $1${RESET}"
}

requirements() 
{
    msg "Installing Requirements"
    sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
    sudo apt update -qq
    sudo apt upgrade -qqy
    sudo apt install -qqy ccache 
    sudo apt install -qqy gcc-6 g++-6 gfortran-6 libgfortran-6-dev \
                        gcc-7  g++-7 gfortran-7 libgfortran-7-dev \
                        gcc-8  g++-8 gfortran-8 libgfortran-8-dev \
                        fort77

    sudo ln -s -f /usr/bin/gcc-7 /usr/bin/gcc
    sudo ln -s -f /usr/bin/g++-7 /usr/bin/g++
    sudo ln -s -f /usr/bin/gfortran-7 /usr/bin/gfortran
    
    #THD dependencies
    sudo apt install -qqy libasio-dev mpich libopenmpi-dev

    #Pytorch Requirements
    sudo apt install -qqy libeigen3-dev imagemagick graphviz
    #mkdir -p /var/python-repo-local/3.6

    #Tests
    sudo apt install -qqy libgflags-dev libgoogle-glog-dev libprotobuf-dev

    pip download --exists-action 'i' -r /projects/requirements.pytorch -d /var/python-repo-local/3.6
    pip install --user -r /projects/requirements.pytorch -f /var/python-repo-local/3.6
}

# OpenMpi
# https://www.open-mpi.org/
# https://github.com/open-mpi/ompi.git
update_openmpi_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/ompi" ]]; then
        msg "Updating OpenMPI sources"
        cd ${HOME}/ompi
        git pull
    else
        msg "Cloning the OpenMPI sources"
        git clone https://github.com/open-mpi/ompi.git
    fi
}
build_openmpi_sources()
{
    msg "Building OpenMPI"

    sudo apt update  -qq
    sudo apt install -qqy ccache autoconf automake libtool flex

    if [[ -d "/opt/openmpi" ]]; then

        msg "OpenMPI already installed"
        msg "For Change version, DO IT MANUALLY"

    else
        export CC="ccache gcc-7"
        export CXX="ccache g++-7"
        export FC="ccache gfortran-7"
        cd ${HOME}/ompi
        ./autogen.pl
        
        #./configure --prefix=/opt/openmpi-4.1.0 \
        #            --with-cuda=/usr/local/cuda/ \
        #            --with-cuda-libdir=/usr/local/cuda/lib64

        ./configure --enable-mpi-thread-multiple \
                    --with-cuda=/usr/local/cuda/ \
                    --with-cuda-libdir=/usr/local/cuda/lib64 \
                    --prefix=/opt/openmpi
                    #--prefix=/usr

        make -j"$(nproc)" all
        
        sudo make -j"$(nproc)" install
        
        export PATH=/opt/openmpi/bin:${PATH}
        export LD_LIBRARY_PATH=/opt/openmpi/lib:${LD_LIBRARY_PATH}

        echo '# [OpenBLAS]' | tee -a ${HOME}/.bashrc
        echo 'export PATH=/opt/openmpi/bin:${PATH}' | tee -a ${HOME}/.bashrc
        echo 'export LD_LIBRARY_PATH=/opt/openmpi/lib:${LD_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc
    fi

    echo '/opt/openmpi/lib' | sudo tee /etc/ld.so.conf.d/openmpi.conf
    sudo ldconfig

    #[Verify]
    mpirun --version
    #mpirun (Open MPI) 4.1.0a1
    ompi_info --parsable --all | grep mpi_built_with_cuda_support:value
    #mca:mpi:base:param:mpi_built_with_cuda_support:value:true
}

# PyBynd11
update_pybind11_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/pybind11" ]]; then
        msg "Updating Pybind11 sources"
        cd ${HOME}/pybind11
        git pull
    else
        msg "Cloning the Pybind11 sources"
        git clone https://github.com/pybind/pybind11.git
    fi
}
build_pybind11_sources()
{
    msg "Building PyBind"
    sudo apt update  -qq
    sudo apt install -qqy libboost-all-dev

    mkdir -p ${HOME}/pybind11/build
    cd ${HOME}/pybind11/build
    cmake .. 
    make -j"$(nproc)"
    sudo make install

    echo "export pybind11_DIR=/usr/local/share/cmake/pybind11" | tee -a ${HOME}/.bashrc
    echo "export pybind11_INCLUDE_DIR=/usr/local/include/pybind11" | tee -a ${HOME}/.bashrc

    export pybind11_DIR=/usr/local/share/cmake/pybind11
    export pybind11_INCLUDE_DIR=/usr/local/include/pybind11
}

# Lapack
# http://www.netlib.org/lapack/
# https://github.com/Reference-LAPACK/lapack.git
update_lapack_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/lapack" ]]; then
        msg "Updating LAPACK sources"
        cd ${HOME}/lapack
        git pull
    else
       msg "Clonning LAPACK sources"
       git clone --recurse https://github.com/Reference-LAPACK/lapack.git
    fi
}
build_lapack_sources()
{
    msg "Building LAPACK"
    
    if [[ -d "/opt/lapack" ]]; then

        msg "LAPACK already installed"
        msg "For Change version, DO IT MANUALLY"

    else
        #https://wiki.gentoo.org/wiki/Project:AMD64/Fixing_-fPIC_Errors_Guide
        #http://theoryno3.blogspot.com/2010/12/compiling-lapack-as-shared-library-in.html

        export CXXFLAGS="$CXXFLAGS -fPIC"
        export CFLAGS="$CFLAGS -fPIC" 

        cd ${HOME}/lapack
        
        cp ${HOME}/lapack/make.inc.example ${HOME}/lapack/make.inc
        mkdir $HOME/build -p
        cd $HOME/build
        cmake .. -DCMAKE_INSTALL_PREFIX=/opt/lapack \
                 -DBUILD_SHARED_LIBS=ON \
                 -DLAPACKE=ON \
                 -DCMAKE_BUILD_TYPE=RELEASE
        
        make -j"$(nproc)"
        sudo make install

        #sudo make install prefix=/opt/lapack
        #sudo make install prefix=/usr

        echo '# [LAPACK / LAPACKE]' | tee -a ${HOME}/.bashrc
        echo 'export LD_LIBRARY_PATH=/opt/lapack:${LD_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc
        echo '/opt/lapack/lib' | sudo tee /etc/ld.so.conf.d/lapack.conf
        
        export LD_LIBRARY_PATH=/opt/lapack/lib:${LD_LIBRARY_PATH}

        sudo ldconfig
    fi
}

# ATLAS
# http://math-atlas.sourceforge.net/
# https://github.com/math-atlas/math-atlas
update_atlas_sources()
{

    sudo apt install -qqy txt2man
    wget https://github.com/math-atlas/math-atlas/archive/v3.11.40.tar.gz -O atlas3.11.40.tar.gz
    bunzip2 -c atlas3.10.3.tar.bz2 | tar xfm -  
    mv ATLAS atlas-3.10.3

}
build_atlas_sources()
{
    msg "Building ATLAS"
    
    if [[ -d "/opt/atlas" ]]; then

        msg "ATLAS already installed"
        msg "For Change version, DO IT MANUALLY"

    else

        #cd $HOME/math-atlas
        #make srcdir=SRC
        #cd SRC
        #make
        #cd ATLAS
        cd atlas-3.10.3
        mkdir -p build
        cd build
        ../configure -b 64 -D c -DPentiumCPS=3330 --shared --prefix=/opt/atlas  --cripple-atlas-performance 
        make build
        #make check
        #make ptcheck
        #make time
        sudo make install

        echo '# [ATLAS]' | tee -a ${HOME}/.bashrc
        echo 'export LD_LIBRARY_PATH=/opt/atlas:${LD_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc
        echo '/opt/atlas/lib' | sudo tee /etc/ld.so.conf.d/atlas.conf

        export LD_LIBRARY_PATH=/opt/atlas/lib:${LD_LIBRARY_PATH}

        sudo ldconfig
    fi
}

# OpenBlas
# http://www.openblas.net/
# https://github.com/xianyi/OpenBLAS
update_openblas_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/openblas" ]]; then
        msg "Updating OpenBlas sources"
        cd ${HOME}/openblas
        git pull
    else
       msg "Clonning OpenBlas sources"
       git clone --recurse https://github.com/xianyi/OpenBLAS.git openblas
    fi
}
build_openblas_sources()
{
    msg "Building OpenBlas"

    if [[ -d "/opt/openblas" ]]; then

        msg "OpenBlas already installed"
        msg "For Change version, DO IT MANUALLY"

    else
    
        cd ${HOME}/openblas

        make -j"$(nproc)" 
        #NO_LAPACK=1
        
        #sudo make install prefix=/usr
        sudo make install PREFIX=/opt/openblas
        
        export PATH=/opt/openblas/bin:${PATH}
        export LD_LIBRARY_PATH=/opt/openblas/lib:${LD_LIBRARY_PATH}

        echo '# [OpenBLAS]' | tee -a ${HOME}/.bashrc
        echo 'export PATH=/opt/openblas/bin:${PATH}' | tee -a ${HOME}/.bashrc
        echo 'export LD_LIBRARY_PATH=/opt/openblas/lib:${LD_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc
        
    fi

    echo '/opt/openblas/lib' | sudo tee /etc/ld.so.conf.d/openblas.conf
    sudo ldconfig
}

# MAGMA 2.4.X
# http://www.icl.utk.edu/research
# https://icl.utk.edu/magma/software/index.html
# http://icl.cs.utk.edu/projectsfiles/magma/doxygen/installing.html
# https://bitbucket.org/icl/magma
update_magma_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/magma" ]]; then
        msg "Updating MAGMA sources"
        cd ${HOME}/magma
        hg pull
        hg update default
    else
       msg "Clonning MAGMA sources"
       hg clone https://bitbucket.org/icl/magma
    fi
}
build_magma_sources()
{
    if [[ -d "/opt/openblas" ]]; then

        msg "Magma already installed"
        msg "For Change version, DO IT MANUALLY"

    else

        export CUDADIR=/usr/loca/cuda
        #export ACMLDIR=/opt/acml-5.3.1
        #export ATLASDIR=/opt/atlas
        #export LAPACKDIR=/opt/LAPACK
        export OPENBLASDIR=/opt/openblas

        msg "Building MAGMA"
        #sudo apt update  -qq
        #sudo apt install liblapack-dev libblas-dev 
        #sudo apt remove -qqy libblas-common libblas-dev libblas3 liblapack-dev liblapack3
        #sudo apt remove -qqy libblas-common libblas-dev libblas3 libopenblas-base libopenblas-dev
        #sudo apt install -qqy libopenblas-dev
        sudo ln -s /usr/local/cuda/lib64 /usr/local/cuda/lib -f
        
        cd ${HOME}/magma
        cp ${HOME}/magma/make.inc-examples/make.inc.openblas ${HOME}/magma/make.inc
        
        #cat << EOF | tee ${HOME}/magma/make.inc
        #CUDADIR=/usr/local/cuda
        #MKLROOT=$MKLROOT
        #FORT=gfortran
        #FPIC= -fPIC
        #GPU_TARGET=sm_30
        ##MIN_ARCH=300
        ##NV_SM= -gencode arch=compute_30,code=sm_30
        ##NV_COMP= -gencode arch=compute_30,code=compute_30
        #EOF

        #-DMAGMA_WITH_MKL
        #-DMAGMA_NO_V1
        make -j"$(nproc)" all
        sudo make install prefix=/opt/magma
        #sudo make install prefix=/usr
        sudo ldconfig
        
        export LD_LIBRARY_PATH=/opt/magma/lib:${LD_LIBRARY_PATH}

        echo '# [Magma]' | tee -a ${HOME}/.bashrc
        echo 'export LD_LIBRARY_PATH=/opt/magma/lib:${LD_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc
    fi

    echo '/opt/magma/lib' | sudo tee /etc/ld.so.conf.d/magma.conf
    sudo ldconfig
}


export MAGMA_VERSION=magma-2.4.0
# MAGMA 2.4.0
download_magma_release()
{
    #http://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.4.0.tar.gz
    #http://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.3.0.tar.gz
    
    filename=${MAGMA_VERSION}.tar.gz

    cd ${HOME}
    if [[ ! -e "/opt/magma" ]]; then
        
        msg "Download MAGMA 2.4.0 sources"
        
        if [[ ! -e "/utils/magma/${filename}" ]];then
            wget http://icl.cs.utk.edu/projectsfiles/magma/downloads/${filename} -O /utils/magma/${filename}
            cp /utils/magma/${filename} $HOME
            cd $HOME
            tar -xf ${filename}
            #mv ${MAGMA_VERSION} magma
            ln -s ${MAGMA_VERSION} magma -f
            #cd $HOME/magma

            # WORK for magma 2.4.0
            # wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda92-2.3.0/cmakelists.patch
            # wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda92-2.3.0/thread_queue.patch
            # patch <cmakelists.patch
            # patch -p0 <thread_queue.patch

            # ONLY for magma 2.3.0
            # wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda92-2.3.0/magma_cparict_tools.patch
            # wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda92-2.3.0/magma_dparict_tools.patch
            # wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda92-2.3.0/magma_sparict_tools.patch
            # wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda92-2.3.0/magma_zparict_tools.patch
            # patch -p0 <magma_cparict_tools.patch
            # patch -p0 <magma_dparict_tools.patch
            # patch -p0 <magma_sparict_tools.patch
            # patch -p0 <magma_zparict_tools.patch
        else
            cp /utils/magma/${filename} $HOME
            cd $HOME
            tar -xf ${filename}
            mv ${MAGMA_VERSION} magma
            #cd $HOME/magma

            # WORK for magma 2.4.0
            #cp /utils/magma/cmakelists.patch $HOME/magma
            #cp /utils/magma/thread_queue.patch $HOME/magma
            #patch -p0 <thread_queue.patch
            #patch -p0 <magma_cparict_tools.patch

            # ONLY for magma 2.3.0
            # cp /utils/magma/magma_cparict_tools.patch $HOME/${MAGMA_VERSION}
            # cp /utils/magma/magma_dparict_tools.patch $HOME/${MAGMA_VERSION}
            # cp /utils/magma/magma_sparict_tools.patch $HOME/${MAGMA_VERSION}
            # cp /utils/magma/magma_zparict_tools.patch $HOME/${MAGMA_VERSION}
            # patch -p0 <magma_cparict_tools.patch
            # patch -p0 <magma_dparict_tools.patch
            # patch -p0 <magma_sparict_tools.patch
            # patch -p0 <magma_zparict_tools.patch
        fi
    fi
}
build_magma_release()
{
    if [[ -d "/opt/magma" ]]; then

        msg "Magma already installed"
        msg "For Change version, DO IT MANUALLY"
    else
        export CUDADIR=/usr/local/cuda
        
        export OPENBLASDIR=/opt/openblas
        #export LAPACKDIR=/opt/lapack
        #export ATLASDIR=/opt/atlas

        export GPU_TARGET="sm_30"
        export MAGMA_NO_V1=ON
        export PREFIX=/opt/${MAGMA_VERSION}
        
        #sudo ln -s /usr/local/cuda/lib64 /usr/local/cuda/lib -f

        msg "Building MAGMA 2.4.0"

        # cd $HOME/${MAGMA_VERSION}
        # mkdir $HOME/${MAGMA_VERSION}/build -p
        # cd $HOME/${MAGMA_VERSION}/build
        # cmake .. -DUSE_FORTRAN=ON -DGPU_TARGET="sm_30" -DCMAKE_INSTALL_PREFIX=$PREFIX
        # make -j"$(nproc)" all
        # sudo make install
        
        cd $HOME/magma
        cp make.inc-examples/make.inc.openblas make.inc
        
        make -j"$(nproc)" all
        #sudo make install prefix=/opt/magma
        sudo make install prefix=$PREFIX OPENBLASDIR=$OPENBLASDIR CUDADIR=$CUDADIR
    
        export LD_LIBRARY_PATH=/opt/magma/lib:${LD_LIBRARY_PATH}

        #echo '' | tee -a ${HOME}/.bashrc
        #echo 'export OMP_NUM_THREADS=10' | tee -a ${HOME}/.bashrc
        #echo 'export MKL_NUM_THREADS=10' | tee -a ${HOME}/.bashrc
        #echo 'export VECLIB_MAXIMUM_THREADS=10' | tee -a ${HOME}/.bashrc
        echo 'export LD_LIBRARY_PATH=/opt/magma/lib:${LD_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc
        echo 'export MAGMA_NUM_GPUS=1' | tee -a ${HOME}/.bashrc
    fi

    echo '/opt/magma/lib' | sudo tee /etc/ld.so.conf.d/magma.conf
    sudo ldconfig
}

# MKL
# https://software.intel.com/en-us/mkl
install_mkl_packages()
{
    msg "Installing Intel Performance Libraries:"
    if [[ -d "/opt/intel" ]];then

        msg "MKL already installed"

    else
        
        cd ${HOME}
        mkdir -p ${HOME}/intel_installers

        msg "Installing MKL - Intel Math Kernel Library"
        # [MKL]
        tar -xf /utils/intel/l_mkl_2019.0.117.tgz -C ${HOME}/intel_installers
        cd ${HOME}/intel_installers/l_mkl_2019.0.117
        if [[ -e "/utils/intel/mkl-silent.cfg" ]];then
        sudo ./install.sh  --silent /utils/intel/mkl-silent.cfg
        else
        sudo ./install.sh  --duplicate /utils/intel/mkl-silent.cfg
        fi

        msg "Installing MPI - Intel MPI Library"
        # [MPI]
        tar -xf /utils/intel/l_mpi_2019.0.117.tgz -C ${HOME}/intel_installers/
        cd ${HOME}/intel_installers/l_mpi_2019.0.117
        if [[ -e "/utils/intel/mpi-silent.cfg" ]];then
        sudo ./install.sh  --silent /utils/intel/mpi-silent.cfg
        else
        sudo ./install.sh  --duplicate /utils/intel/mpi-silent.cfg
        fi

        msg "Installing TBB - Intel Threading Building BLocks Library"
        # [TBB]
        tar -xf /utils/intel/l_tbb_2019.0.117.tgz -C ${HOME}/intel_installers
        cd ${HOME}/intel_installers/l_tbb_2019.0.117
        if [[ -e "/utils/intel/tbb-silent.cfg" ]];then
        sudo ./install.sh  --silent /utils/intel/tbb-silent.cfg
        else
        sudo ./install.sh  --duplicate /utils/intel/tbb-silent.cfg
        fi

        msg "Installing IPP - Intel Integrated Performance Primitives"
        # [IPP]
        tar -xf /utils/intel/l_ipp_2019.0.117.tgz -C ${HOME}/intel_installers/
        cd ${HOME}/intel_installers/l_ipp_2019.0.117
        if [[ -e "/utils/intel/ipp-silent.cfg" ]];then
        sudo ./install.sh  --silent /utils/intel/ipp-silent.cfg
        else
        sudo ./install.sh  --duplicate /utils/intel/ipp-silent.cfg
        fi

        #msg "Installing DAAL - Intel Data Analytics Acceleration Library"
        ## [DAAL]
        #tar -xf /utils/intel/l_daal_2019.0.117.tgz -C ${HOME}/intel_installers/
        #cd ${HOME}/intel_installers/l_daal_2019.0.117
        #if [[ -e "/utils/intel/daal-silent.cfg" ]];then
        #sudo ./install.sh  --silent /utils/intel/daal-silent.cfg
        #else
        #sudo ./install.sh  --duplicate /utils/intel/daal-silent.cfg
        #fi

        echo 'export MKLROOT=/opt/intel/mkl' | tee -a ${HOME}/.bashrc
        echo 'export MKL_ROOT=${MKLROOT}' | tee -a ${HOME}/.bashrc
        echo 'export MKL_INCLUDE=${MKL_ROOT}/include' | tee -a ${HOME}/.bashrc
        echo 'export MKL_LIBRARY=${MKL_ROOT}/lib/intel64' | tee -a ${HOME}/.bashrc
        echo 'source /opt/intel/mkl/bin/mklvars.sh intel64' | tee -a ${HOME}/.bashrc
        echo 'source /opt/intel/bin/compilervars.sh intel64' | tee -a ${HOME}/.bashrc
        echo 'export CMAKE_INCLUDE_PATH=${MKL_INCLUDE}:${CMAKE_INCLUDE_PATH}' | tee -a ${HOME}/.bashrc
        echo 'export CMAKE_LIBRARY_PATH=${MKL_LIBRARY}:${CMAKE_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc

    fi

    export MKLROOT=/opt/intel/mkl
    export MKL_ROOT=${MKLROOT}
    export MKL_INCLUDE=${MKL_ROOT}/include
    export MKL_LIBRARY=${MKL_ROOT}/lib/intel64
    #source /opt/intel/mkl/bin/mklvars.sh intel64
    #. /opt/intel/mkl/bin/mklvars.sh intel64
    #source /opt/intel/bin/compilervars.sh intel64
    #. /opt/intel/bin/compilervars.sh intel64
    export CMAKE_INCLUDE_PATH=${MKL_INCLUDE}:${CMAKE_INCLUDE_PATH}
    export CMAKE_LIBRARY_PATH=${MKL_LIBRARY}:${CMAKE_LIBRARY_PATH}
}

# http://www.linuxfromscratch.org/hints/downloads/files/intel-fortran-compiler.txt
# https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-apt-repo
install_mkl_repository()
{
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB

    sudo wget https://apt.repos.intel.com/setup/intelproducts.list -O /etc/apt/sources.list.d/intelproducts.list
    sudo apt-get update
    sudo apt install intel-mkl intel-ipp intel-tbb intel-daal intel-mpi

}

# MKL-DNN
# https://01.org/mkl-dnn
# https://github.com/intel/mkl-dnn
update_mkl_dnn_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/mkl-dnn" ]]; then
        msg "Updating mkl-dnn sources"
        cd ${HOME}/mkl-dnn
        git pull
    else
       msg "Clonning mkl-dnn sources"
        git clone --recurse https://github.com/intel/mkl-dnn.git
    fi
}
build_mkl_dnn_sources()
{
    msg "Building mkl-dnn"
    sudo apt update  -qq
    sudo apt install -qqy doxygen
    
    #msg "Installing MKL-lightweight"
    #cd $HOME/mkl-dnn/scripts
    #./prepare_mkl.sh

    mkdir ${HOME}/mkl-dnn/build -p
    cd ${HOME}/mkl-dnn/build
    cmake -DCMAKE_INSTALL_PREFIX=/usr \
          -DMKLDNN_LIBRARY_TYPE=SHARED \
          -DMKLDNN_THREADING=OMP:COMP \
          .. 
    #      -DMKLDNN_USE_MKL=NONE \
    #      -DWITH_EXAMPLE=OFF \
    #      -DWITH_TEST=OFF \
    #      -DCMAKE_BUILD_TYPE=release \

    make -j"$(nproc)"
    sudo make install
    sudo ldconfig
}

# PyTorch
# https://pytorch.org/
# https://github.com/pytorch/pytorch
# https://facebook.ai/developers/tools/pytorch
update_pytorch_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/pytorch" ]]; then
        msg "Updating PyTorch sources"
        cd ${HOME}/pytorch
        git pull
    else
        msg "Cloning the PyTorch sources"
        git clone --recurse https://github.com/pytorch/pytorch
    fi;
}
build_pytorch_sources()
{
    msg "Building PyTorch"
    cd ${HOME}/pytorch
    if [[ -e "${HOME}/pytorch/dist" ]];then
        rm -rf ${HOME}/pytorch/dist
    fi
    
    #if [ "${prefix}" = "cpu" ]; then
    #    #NO_CUDNN=1 NO_SYSTEM_NCCL=1
    #    export USE_CUDA=OFF 
    #    export NO_CUDA=1 
    #    export NO_CUDNN=1 
    #    export NO_SYSTEM_NCCL=1 
    #    export WITH_DISTRIBUTED=1 
    #    python3 setup.py build_deps
    #    python3 setup.py develop
    #    python3 setup.py bdist_wheel
    #else
    #WITH_DISTRIBUTED=1
    export TORCH_CUDA_ARCH_LIST="${COMPUTE_CAPABILITY};" 
    export TORCH_NVCC_FLAGS="-Xfatbin -compress-all" 
    #export USE_STATIC_CUDNN=1
    #export USE_STATIC_NCCL=1
    #export ATEN_STATIC_CUDA=1
    #export USE_CUDA_STATIC_LINK=1
    export NO_TEST=1 
    export USE_MKLDNN=1 
    export WITH_DISTRIBUTED=1 
    export USE_MAGMA=ON
    export MAGMA_HOME=/opt/magma
    #export USE_OPENMP=ON 
    #export MKLDNN_LIBRARY=/usr/local/lib 
    #export MKLDNN_INCLUDE_DIR=/usr/local/include
    python3 setup.py build_deps
    python3 setup.py develop
    python3 setup.py bdist_wheel
    #fi
    
    #TODO: save the built package into correct folder
    mkdir -p /var/python-repo-local/3.6/${HOSTNAME_PREFIX}${VERSION}/old/
    mv /var/python-repo-local/3.6/${HOSTNAME_PREFIX}${VERSION}/torch*.whl /var/python-repo-local/3.6/${HOSTNAME_PREFIX}${VERSION}/old/
    cp ${HOME}/pytorch/dist/torch*.whl /var/python-repo-local/3.6/${HOSTNAME_PREFIX}${VERSION}/
    
    pip install --user ${HOME}/pytorch/dist/torch*.whl
    cd ${HOME}/pytorch/docs
    msg "Building pytorch docset"
    make docset PYCMD=python3
    #TODO: Update the documentation for ZEAL (use cp always)
    if [[ -e "/frameworks/Zeal/docsets/PyTorch.docset" ]];then
        rm -rf  /frameworks/Zeal/docsets/PyTorch.docset
    fi 
    cp -R ${HOME}/pytorch/docs/PyTorch.docset /frameworks/Zeal/docsets/
    #PyTorch.docset
}

# TorchVision
update_torchvision_sources()
{
    cd ${HOME}
    if [[ -d "${HOME}/vision" ]]; then
        msg "Updaing torchvision sources"
        cd ${HOME}/vision
        git pull
    else
        msg "Cloning torchvision sources"${HOME}/ompi
        git clone --recurse https://github.com/pytorch/vision.git
    fi
}
build_torchvision_sources()
{
    msg "Building torchvision"
    cd ${HOME}/vision
    if [[ -e "${HOME}/vision/dist" ]];then
        rm -rf ${HOME}/vision/dist
    fi
    python3 setup.py bdist_wheel
    pip install --user ${HOME}/vision/dist/torchvision*.whl
    mv ${HOME}/vision/dist/torchvision*.whl /var/python-repo-local/3.6/

    msg "Building torchvision docset"
    cd ${HOME}/vision/docs
    make docset
    if [[ -e "/frameworks/Zeal/docsets/torchvision.docset" ]];then
        rm -rf  /frameworks/Zeal/docsets/torchvision.docset
    fi 
    cp -R ${HOME}/vision/docs/torchvision.docset /frameworks/Zeal/docsets/
    #torchvision.docset
}

# TorchText
update_tochtext_sources()
{

    cd ${HOME}
    if [[ -d "${HOME}/text" ]]; then
        msg "Updaing torchtext sources"
        cd ${HOME}/text
        git pull
    else
        msg "Cloning torchtext sources"
        git clone --recurse https://github.com/pytorch/text.git
    fi
}
build_torchtext_sources()
{
    msg "Building torchtext"
    cd ${HOME}/text
    
    if [[ -e "${HOME}/text/dist" ]];then
        rm -rf ${HOME}/text/dist
    fi

    python3 setup.py bdist_wheel
    pip install --user ${HOME}/text/dist/torchtext*.whl
    mv ${HOME}/text/dist/torchtext*.whl /var/python-repo-local/3.6/

    msg "Building torchtext docset"
    cd ${HOME}/text/docs
    make docset
    
    if [[ -e "/frameworks/Zeal/docsets/torchtext.docset" ]];then
        rm -rf  /frameworks/Zeal/docsets/torchtext.docset
    fi 

    cp -R ${HOME}/text/docs/torchtext.docset /frameworks/Zeal/docsets/
    #torchtext.docset
}

build()
{
    if [[ "${ACTION}" == "req" || "${ACTION}" == "all" ]];then
        
        requirements;

        update_openmpi_sources;
        #update_lapack_sources;
        update_openblas_sources;
        #update_pybind11_sources;
        download_magma_release;
        #update_mkl_dnn_sources;

        build_openmpi_sources;
        #build_lapack_sources;
        build_openblas_sources;
        #build_pybind11_sources;

        install_mkl_packages;

        #build_magma_sources;
        build_magma_release;
        #build_mkl_dnn_sources;
    fi

    if [[ "${ACTION}" == "build" || ${ACTION} == "all" ]];then
        update_pytorch_sources;
        update_torchvision_sources;
        update_tochtext_sources;

        build_pytorch_sources;
        build_torchvision_sources;
        build_torchtext_sources;
    fi
}

if [[ "$#" -gt 0 ]];then
    ACTION="$1"
else
    echo "(build, req, all) [default=${ACTION}]"
    read _PARAM_
    if [[ "${_PARAM_}" != "" ]];then
        ACTION="${_PARAM_}"
    fi
fi

build;