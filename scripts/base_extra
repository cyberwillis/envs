#!/bin/bash -e

echo "   ___                  __                  _     _ _             ";
echo "  / _ \_ __ ___        /__\ ___  __ _ _   _(_)___(_) |_ ___  ___  ";
echo " / /_)/ '__/ _ \_____ / \/// _ \/ _\` | | | | / __| | __/ _ \/ __| ";
echo "/ ___/| | |  __/_____/ _  \  __/ (_| | |_| | \__ \ | ||  __/\__ \ ";
echo "\/    |_|  \___|     \/ \_/\___|\__, |\__,_|_|___/_|\__\___||___/ ";
echo "                                   |_|                            ";
echo "           _                                                      ";
echo "  _____  _| |_ _ __ __ _                                          ";
echo " / _ \ \/ / __| '__/ _\` |                                         ";
echo "|  __/>  <| |_| | | (_| |                                         ";
echo " \___/_/\_\\__|_|  \__,_|                                         ";
echo "                                                                  ";

RESET='\033[0m'
COLOR='\033[1;32m'

msg() {
  echo -e "${COLOR}$(date): $1${RESET}"
}

msg "Building and Installing Git (2.19.0)"
sudo apt install -y libz-dev gettext libcurl4-openssl-dev
cd $HOME
wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.xz
tar -xf git-2.19.0.tar.xz
cd git-2.19.0
./configure
make -j"$(nproc)"
sudo make install

#msg "Updating gcc and g++"
sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
sudo apt update -qq
sudo apt upgrade -y
sudo apt install -yq gcc-6 gcc-7 gcc-8 g++-6 g++-7 g++-8
sudo ln -s -f /usr/bin/gcc-7 /usr/bin/gcc
sudo ln -s -f /usr/bin/g++-7 /usr/bin/g++

# ============================================================================

#sudo apt update -qq
#sudo apt install -qqy ccache autoconf automake libtool flex
#export CC="ccache gcc-7"
#export CXX="ccache g++-7"
#
#cd $HOME
#if [[ -d "$HOME/ompi" ]]; then
#
#  cd $HOME/ompi
#  git pull
#  msg "OpenMPI already installed"
#
#else
#  
#  msg "OpenMPI 4.1.0"
#  git clone https://github.com/open-mpi/ompi.git
#  cd $HOME/ompi
#
#  ./autogen.pl
#  #./configure --prefix=/opt/openmpi-4.1.0 --with-cuda=/usr/local/cuda/ --with-cuda-libdir=/usr/local/cuda/lib64
#  ./configure --enable-mpi-thread-multiple --prefix=/opt/openmpi-4.1.0 --with-cuda=/usr/local/cuda/ --with-cuda-libdir=/usr/local/cuda/lib64
#  make -j8 all
#  sudo make -j8 install
#
#  echo 'export PATH=/opt/openmpi-4.1.0/bin:$PATH' | tee -a $HOME/.bashrc
#  echo 'export LD_LIBRARY_PATH=/opt/openmpi-4.1.0/lib:$LD_LIBRARY_PATH' | tee -a $HOME/.bashrc
#fi
#
#  export PATH=/opt/openmpi-4.1.0/bin:$PATH
#  export LD_LIBRARY_PATH=/opt/openmpi-4.1.0/lib:$LD_LIBRARY_PATH
#  #verify
#  mpirun --version
#  #mpirun (Open MPI) 4.1.0a1
#  ompi_info --parsable --all | grep mpi_built_with_cuda_support:value
#  #mca:mpi:base:param:mpi_built_with_cuda_support:value:true

# ============================================================================

#echo "   ___       _     _           _ _ _  ";
#echo "  / _ \_   _| |__ (_)_ __   __| / / | ";
#echo " / /_)/ | | | '_ \| | '_ \ / _\` | | | ";
#echo "/ ___/| |_| | |_) | | | | | (_| | | | ";
#echo "\/     \__, |_.__/|_|_| |_|\__,_|_|_| ";
#echo "       |___/                          ";
#
#
#sudo apt update  -qq
#sudo apt install -qqy libboost-all-dev
#
#cd $HOME
#if [[ -d "$HOME/pybind11" ]]; then
#  
#  cd $HOME/pybind11
#  git pull
#  msg "PyBind already installed"
#
#else
#  
#  msg "Building PyBind"
#  git clone https://github.com/pybind/pybind11.git
#  mkdir -p $HOME/pybind11/build
#  cd $HOME/pybind11/build
#  cmake .. 
#  make -j8
#  sudo make install
#
#  echo "export pybind11_DIR=/usr/local/share/cmake/pybind11" | tee -a $HOME/.bashrc
#  echo "export pybind11_INCLUDE_DIR=/usr/local/include/pybind11" | tee -a $HOME/.bashrc
#fi
#
#export pybind11_DIR=/usr/local/share/cmake/pybind11
#export pybind11_INCLUDE_DIR=/usr/local/include/pybind11

# ============================================================================

#echo "  _____       _       _     ___           _                          ";
#echo "  \_   \_ __ | |_ ___| |   / _ \__ _  ___| | ____ _  __ _  ___  ___  ";
#echo "   / /\/ '_ \| __/ _ \ |  / /_)/ _\` |/ __| |/ / _\` |/ _\` |/ _ \/ __| ";
#echo "/\/ /_ | | | | ||  __/ | / ___/ (_| | (__|   < (_| | (_| |  __/\__ \ ";
#echo "\____/ |_| |_|\__\___|_| \/    \__,_|\___|_|\_\__,_|\__, |\___||___/ ";
#echo "                                                    |___/            ";
#
#if [[ -d "/opt/intel" ]];then
#
#    msg "MKL already installed"
#
#else
#
#    msg "Installing Intel Performance Libraries:"
#    cd $HOME
#    mkdir -p $HOME/intel_installers
#
#    msg "Installing MKL - Intel Math Kernel Library"
#    # [MKL]
#    tar -xf /utils/intel/l_mkl_2019.0.117.tgz -C $HOME/intel_installers
#    cd $HOME/intel_installers/l_mkl_2019.0.117
#    if [[ -e "/utils/intel/mkl-silent.cfg" ]];then
#      sudo ./install.sh  --silent /utils/intel/mkl-silent.cfg
#    else
#      sudo ./install.sh  --duplicate /utils/intel/mkl-silent.cfg
#    fi
#
#    msg "Installing MPI - Intel MPI Library"
#    # [MPI]
#    tar -xf /utils/intel/l_mpi_2019.0.117.tgz -C $HOME/intel_installers/
#    cd $HOME/intel_installers/l_mpi_2019.0.117
#    if [[ -e "/utils/intel/mpi-silent.cfg" ]];then
#      sudo ./install.sh  --silent /utils/intel/mpi-silent.cfg
#    else
#      sudo ./install.sh  --duplicate /utils/intel/mpi-silent.cfg
#    fi
#
#    msg "Installing TBB - Intel Threading Building BLocks Library"
#    # [TBB]
#    tar -xf /utils/intel/l_tbb_2019.0.117.tgz -C $HOME/intel_installers
#    cd $HOME/intel_installers/l_tbb_2019.0.117
#    if [[ -e "/utils/intel/tbb-silent.cfg" ]];then
#      sudo ./install.sh  --silent /utils/intel/tbb-silent.cfg
#    else
#      sudo ./install.sh  --duplicate /utils/intel/tbb-silent.cfg
#    fi
#
#    msg "Installing IPP - Intel Integrated Performance Primitives"
#    # [IPP]
#    tar -xf /utils/intel/l_ipp_2019.0.117.tgz -C $HOME/intel_installers/
#    cd $HOME/intel_installers/l_ipp_2019.0.117
#    if [[ -e "/utils/intel/ipp-silent.cfg" ]];then
#      sudo ./install.sh  --silent /utils/intel/ipp-silent.cfg
#    else
#      sudo ./install.sh  --duplicate /utils/intel/ipp-silent.cfg
#    fi
#
#    msg "Installing DAAL - Intel Data Analytics Acceleration Library"
#    # [DAAL]
#    tar -xf /utils/intel/l_daal_2019.0.117.tgz -C $HOME/intel_installers/
#    cd $HOME/intel_installers/l_daal_2019.0.117
#    if [[ -e "/utils/intel/daal-silent.cfg" ]];then
#      sudo ./install.sh  --silent /utils/intel/daal-silent.cfg
#    else
#      sudo ./install.sh  --duplicate /utils/intel/daal-silent.cfg
#    fi
#
#    echo 'export MKLROOT=/opt/intel/mkl' | tee -a $HOME/.bashrc
#    echo 'export MKL_ROOT=$MKLROOT' | tee -a $HOME/.bashrc
#    echo 'export MKL_INCLUDE=$MKL_ROOT/include' | tee -a $HOME/.bashrc
#    echo 'export MKL_LIBRARY=$MKL_ROOT/lib/intel64' | tee -a $HOME/.bashrc
#    echo 'source /opt/intel/mkl/bin/mklvars.sh intel64' | tee -a $HOME/.bashrc
#    echo 'source /opt/intel/bin/compilervars.sh intel64' | tee -a $HOME/.bashrc
#    echo 'export CMAKE_INCLUDE_PATH=$MKL_INCLUDE:$CMAKE_INCLUDE_PATH' | tee -a $HOME/.bashrc
#    echo 'export CMAKE_LIBRARY_PATH=$MKL_LIBRARY:$CMAKE_LIBRARY_PATH' | tee -a $HOME/.bashrc
#
#fi
#
#export MKLROOT=/opt/intel/mkl
#export MKL_ROOT=$MKLROOT
#export MKL_INCLUDE=$MKL_ROOT/include
#export MKL_LIBRARY=$MKL_ROOT/lib/intel64
##source /opt/intel/mkl/bin/mklvars.sh intel64
##source /opt/intel/bin/compilervars.sh intel64
#export CMAKE_INCLUDE_PATH=$MKL_INCLUDE:$CMAKE_INCLUDE_PATH
#export CMAKE_LIBRARY_PATH=$MKL_LIBRARY:$CMAKE_LIBRARY_PATH

# ============================================================================

#echo "           _      ___           _    ";
#echo "  /\/\    /_\    / _ \ /\/\    /_\   ";
#echo " /    \  //_\\  / /_\//    \  //_\\  ";
#echo "/ /\/\ \/  _  \/ /_\\/ /\/\ \/  _  \ ";
#echo "\/    \/\_/ \_/\____/\/    \/\_/ \_/ ";
#echo "                                     ";
#
##sudo apt install liblapack-dev libblas-dev 
##sudo apt remove -qqy libblas-common libblas-dev libblas3 liblapack-dev liblapack3
##sudo apt remove -qqy libblas-common libblas-dev libblas3 libopenblas-base libopenblas-dev
#sudo apt install -qqy libopenblas-dev
#sudo ln -s /usr/local/cuda/lib64 /usr/local/cuda/lib -f
#
#
#if [[ -d "$HOME/magma" ]];then
#    
#    msg "MAGMA alreadu installed"
#
#else
#
#    msg "Building MAGMA"
#    cd $HOME
#    
#    hg clone https://bitbucket.org/icl/magma
#
#    cd $HOME/magma
#
#    cat << EOF | tee $HOME/magma/make.inc
#CUDADIR=/usr/local/cuda
#MKLROOT=/opt/intel/mkl
#FORT=gfortran
#FPIC= -fPIC
#GPU_TARGET=sm_30
##MIN_ARCH=300
##NV_SM= -gencode arch=compute_30,code=sm_30
##NV_COMP= -gencode arch=compute_30,code=compute_30
#EOF
#    make -j12 all
#    #sudo make install prefix=/opt/magma
#    sudo make install prefix=/usr
#    sudo ldconfig
#fi



# ============================================================================

#sudo apt install -qqy doxygen
#
#if [[ -d "$HOME/mkl-dnn" ]];then
#
#    msg "MKL-DNN already installed"
#    cd $HOME/mkl-dnn
#    git pull
#
#else
#    msg "Building MKL-DNN"
#    cd $HOME
#    
#    git clone --recurse https://github.com/intel/mkl-dnn.git
#    #cd $HOME/mkl-dnn/scripts
#    #./prepare_mkl.sh #(install mkl light)
#    mkdir $HOME/mkl-dnn/build -p
#    cd $HOME/mkl-dnn/build
#
#    #cmake -DCMAKE_INSTALL_PREFIX=/opt/mkl-dnn \
#    cmake -DCMAKE_INSTALL_PREFIX=/usr \
#          -DMKLDNN_LIBRARY_TYPE=SHARED \
#          -DMKLDNN_THREADING=OMP:COMP \
#          .. 
#    #      -DMKLDNN_USE_MKL=NONE \
#    #      -DWITH_EXAMPLE=OFF \
#    #      -DWITH_TEST=OFF \
#    #      -DCMAKE_BUILD_TYPE=release \
#    make -j8
#    sudo make install
#    sudo ldconfig
#fi

# ============================================================================

