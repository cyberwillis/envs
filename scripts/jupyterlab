#!/bin/bash -e

echo "   __                    _            _       _      ";
echo "   \ \ _   _ _ __  _   _| |_ ___ _ __| | __ _| |__   ";
echo "    \ \ | | | '_ \| | | | __/ _ \ '__| |/ _\` | '_ \  ";
echo " /\_/ / |_| | |_) | |_| | ||  __/ |  | | (_| | |_) | ";
echo " \___/ \__,_| .__/ \__, |\__\___|_|  |_|\__,_|_.__/  ";
echo "            |_|    |___/                             ";

source /scripts/.env

RESET='\033[0m'
COLOR='\033[1;32m'

msg() {
  echo -e "${COLOR}$(date): $1${RESET}"
}

cd ${HOME}
if [[ "$#" -gt 0 ]];then
  
  PYTHON_VERSION="$1"
  
  if [[ "$#" -gt 1 ]];then
    PYTHON_ENVIRONMENT="$2"
  fi
  
fi

#[DEPRECATED]
enable_pyenv()
{
  export PYENV_ROOT=${HOME}/.pyenv
  export PATH=${PYENV_ROOT}/bin:${PATH}
  eval "$(pyenv init -)"

  pyenv local ${PYTHON_VERSION}

  export PATH=${HOME}/.local/bin:${PATH}

  export PYTHONPATH=/home/ubuntu/.pyenv/versions/${PYTHON_VERSION}/lib/python3.6/site-packages
  #export PYTHONPATH=$HOME/.local/lib/python3.6/site-packages

  export PYTHON_BIN_PATH=/home/ubuntu/.pyenv/shims/python
  #export PYTHON_BIN_PATH=/usr/bin/python3

  export PYTHON_LIB_PATH=/home/ubuntu/.pyenv/versions/${PYTHON_VERSION}/lib/python3.6/site-packages
  #export PYTHON_LIB_PATH=$HOME/.local/lib/python3.6/site-packages

  #msg "Installing Pre-requisites for docs"
  #sudo apt-get -qqy install pandoc texlive-xetex
}

enable_miniconda()
{
  export PATH="${HOME}/.local/bin:${PATH}"
  export PATH="${HOME}/anaconda/bin:${PATH}"
  source activate projects
  #source activate projects
}


if [[ ${PYTHON_ENVIRONMENT} == "pyenv" ]];then
    enable_pyenv;
elif [[ ${PYTHON_ENVIRONMENT} == "miniconda" ]];then
    enable_miniconda;
fi

PYTHON3_MAJOR_MINOR=$(python3 -c 'import sys; print(".".join(map(str,sys.version_info[:2])))')

msg "Installing Jupyterlab"

#mkdir -p /var/python-repo-local/3.6
cd ${HOME}
pip download --exists-action 'w' -r /projects/requirements.generic -d /var/python-repo-local/${PYTHON3_MAJOR_MINOR}
pip install -U -r /projects/requirements.generic -f /var/python-repo-local/${PYTHON3_MAJOR_MINOR} --process-dependency-links #--user

msg "Enabling ipyparallel extension"
ipcluster start --n=8 --ip=* --daemonize && ipcluster stop
jupyter nbextension install ipyparallel --py --user

jupyter nbextension enable ipyparallel --py --user

jupyter serverextension enable ipyparallel --py --user

msg "Enabling widgetsnbextension extentions"
jupyter nbextension enable widgetsnbextension --py --user

msg "Enabling extentions configuration"
jupyter nbextensions_configurator enable --user

msg "Enabling contribution extentions"
jupyter contrib nbextension install --user

msg "Enabling server extentions"
jupyter serverextension enable jupyterlab --py --user

msg "Generating jupyterlab configuration file" #msg "Fixing Avahi multi-task limitation between Host and Guest"
jupyter-notebook --generate-config -y

msg "Enable some usefull extensions"
jupyter nbextension enable collapsible_headings/main
jupyter nbextension enable toc2/main
jupyter nbextension enable codefolding/main
jupyter nbextension enable execute_time/ExecuteTime
jupyter nbextension enable highlighter/highlighter
jupyter nbextension enable hinterland/hinterland
jupyter nbextension enable zenmode/main
jupyter nbextension enable contrib_nbextensions_help_item/main
jupyter nbextension enable toggle_all_line_numbers/main
jupyter nbextension enable init_cell/main
#jupyter nbextension enable nbextensions_configurator/tree_tab/main
#jupyter nbextension enable nbextensions_configurator/config_menu/main

# https://ipython.org/ipython-doc/3/notebook/public_server.html
echo "# [Jupyter Notebook / JupyterLab]" | tee -a ${HOME}/.bashrc
echo "alias tflow='pip uninstall tensorflow -y && pip install --user /frameworks/Tensorflow/tensorflow_pkg/\$HOSTNAME_PREFIX\$VERSION/tensorflow*.whl'" | tee -a ${HOME}/.bashrc
echo "alias ptorch='pip uninstall torch -y && pip install --user /var/python-repo-local/3.6/\$HOSTNAME_PREFIX\$VERSION/torch*.whl torchvision'" | tee -a ${HOME}/.bashrc
echo "export JUPYTER_PORT=8888"  | tee -a ${HOME}/.bashrc
echo "export JUPYTER_SECRET=${JUPYTER_SECRET}" | tee -a ${HOME}/.bashrc
echo "export TORCH_MODEL_ZOO=/data/torch/models" | tee -a ${HOME}/.bashrc 

# How to create a secure ssl / ssh server using certificate
#openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout ${HOME}/.ssh/jupyter.pem -out ${HOME}/.ssh/jupyter.pem
#echo 'alias jbookc="jupyter notebook --port=${JUPYTER_PORT} --ip=${JUPYTER_IP} --no-browser --NotebookApp.password=${JUPYTER_SECRET}  --NotebookApp.notebook_dir=/projects --certfile=${HOME}/.ssh/jupyter.pem --allow-root"'  | tee -a ${HOME}/.bashrc
#echo "alias jlabc=\"jupyter lab --port=\${JUPYTER_PORT} --ip=\${JUPYTER_IP} --no-browser --NotebookApp.password='sha1:\${JUPYTER_SECRET}'  --NotebookApp.notebook_dir=/projects --certfile=${HOME}/.ssh/jupyter.pem --allow-root \" " | tee -a ${HOME}/.bashrc

echo 'alias jbook="jupyter notebook --port=${JUPYTER_PORT} --ip=${JUPYTER_IP} --no-browser --NotebookApp.password=${JUPYTER_SECRET}  --NotebookApp.notebook_dir=/projects --allow-root"'  | tee -a ${HOME}/.bashrc
echo "alias jlab=\"jupyter lab --port=\${JUPYTER_PORT} --ip=\${JUPYTER_IP} --no-browser --NotebookApp.password='sha1:\${JUPYTER_SECRET}'  --NotebookApp.notebook_dir=/projects --allow-root \" " | tee -a ${HOME}/.bashrc
echo 'alias jbookt="jupyter notebook --port=${JUPYTER_PORT} --ip=${JUPYTER_IP} --no-browser --NotebookApp.notebook_dir=/projects --allow-root"'  | tee -a ${HOME}/.bashrc
echo "alias jlabt=\"jupyter lab --port=\${JUPYTER_PORT} --ip=\${JUPYTER_IP} --no-browser --NotebookApp.notebook_dir=/projects --allow-root \" " | tee -a ${HOME}/.bashrc

msg "Jupyter Notebook as Service"
cd ${HOME}
cat <<EOF | sudo tee /lib/systemd/system/jupyter.service
# After Ubuntu 16.04, Systemd becomes the default. 
# It is simpler than https://gist.github.com/Doowon/38910829898a6624ce4ed554f082c4dd

[Unit]
Description=Jupyter Notebook

[Service]
Type=simple
PIDFile=/run/jupyter.pid
ExecStart=/bin/bash -c "/home/ubuntu/.local/bin/jupyter notebook --port=${JUPYTER_PORT} --ip=\$(ip route get 8.8.8.8 | head -1 | cut -d\" \" -f8) --no-browser --NotebookApp.password=${JUPYTER_SECRET}  --NotebookApp.notebook_dir=/projects --allow-root --config=/home/ubuntu/.jupyter/jupyter_notebook_config.py"

User=ubuntu
Group=ubuntu
WorkingDirectory=/home/ubuntu/
Restart=always
RestartSec=10
#KillMode=mixed

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl enable jupyter.service
sudo systemctl daemon-reload
sudo systemctl restart jupyter.service

# pip download --exists-action 'w' -r /projects/requirements.fastai -d /var/python-repo-local/${PYTHON3_MAJOR_MINOR}
# pip install --user -U -r /projects/requirements.fastai -f /var/python-repo-local/${PYTHON3_MAJOR_MINOR} --process-dependency-links