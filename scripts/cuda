#!/bin/bash -e

# Execute with from outsite LXC
# lxc exec controller -- bash -c "/projects/_lxc/cuda.sh"

# [DOCUMENTATION]
# https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html
# CUDA Toolkit	              Linux x86_64 Driver Version  Windows x86_64 Driver Version
# CUDA 10.0.130               >= 410.48                    >= 411.31
# CUDA 9.2 (9.2.148 Update 1) >= 396.37                    >= 398.26
# CUDA 9.2 (9.2.88)	          >= 396.26                    >= 397.44
# CUDA 9.1 (9.1.85)	          >= 390.46                    >= 391.29
# CUDA 9.0 (9.0.76)	          >= 384.81                    >= 385.54
# CUDA 8.0 (8.0.61 GA2)	      >= 375.26                    >= 376.51
# CUDA 8.0 (8.0.44)	          >= 367.48                    >= 369.30
# CUDA 7.5 (7.5.16)	          >= 352.31                    >= 353.66
# CUDA 7.0 (7.0.28)	          >= 346.46                    >= 347.62

# http://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#package-manager-metas
# [CUDA 10.0 META PACKAGES]
# cuda	                  Installs all CUDA Toolkit and Driver packages. Handles upgrading to the next version of the cuda package when it's released.
# cuda-10-0	              Installs all CUDA Toolkit and Driver packages. Remains at version 10.0 until an additional version of CUDA is installed.
# cuda-toolkit-10-0	      Installs all CUDA Toolkit packages required to develop CUDA applications. Does not include the driver.
# cuda-tools-10-0	        Installs all CUDA command line and visual tools.
# cuda-runtime-10-0	      Installs all CUDA Toolkit packages required to run CUDA applications, as well as the Driver packages.
# cuda-compiler-10-0	    Installs all CUDA compiler packages.
# cuda-libraries-10-0	    Installs all runtime CUDA Library packages.
# cuda-libraries-dev-10-0	Installs all development CUDA Library packages.
# cuda-drivers	          Installs all Driver packages. Handles upgrading to the next version of the Driver packages when they're released.

# [CUDA 9.2 META PACKAGES]
# cuda	                  Installs all CUDA Toolkit and Driver packages. Handles upgrading to the next version of the cuda package when it's released.
# cuda-9-2	              Installs all CUDA Toolkit and Driver packages. Remains at version 9.2 until an additional version of CUDA is installed.
# cuda-toolkit-9-2	      Installs all CUDA Toolkit packages required to develop CUDA applications. Does not include the driver.
# cuda-tools-9-2	        Installs all CUDA command line and visual tools.
# cuda-runtime-9-2	      Installs all CUDA Toolkit packages required to run CUDA applications, as well as the Driver packages.
# cuda-compiler-9-2	      Installs all CUDA compiler packages.
# cuda-libraries-9-2	    Installs all runtime CUDA Library packages.
# cuda-libraries-dev-9-2	Installs all development CUDA Library packages.
# cuda-drivers	          Installs all Driver packages. Handles upgrading to the next version of the Driver packages when they're released.

# [CUDA 9.1 META PACKAGES]
# cuda	                  Installs all CUDA Toolkit and Driver packages. Handles upgrading to the next version of the cuda package when it's released.
# cuda-9-1                Installs all CUDA Toolkit and Driver packages. Remains at version 9.1 until an additional version of CUDA is installed.
# cuda-toolkit-9-1        Installs all CUDA Toolkit packages required to develop CUDA applications. Does not include the driver.
# cuda-tools-9-1          Installs all CUDA command line and visual tools.
# cuda-runtime-9-1        Installs all CUDA Toolkit packages required to run CUDA applications, as well as the Driver packages.
# cuda-compiler-9-1       Installs all CUDA compiler packages.
# cuda-libraries-9-1      Installs all runtime CUDA Library packages.
# cuda-libraries-dev-9-1  Installs all development CUDA Library packages.
# cuda-drivers	          Installs all Driver packages. Handles upgrading to the next version of the Driver packages when they're released.

# [CUDA 9.0 META PACKAGES]
# cuda	                  Installs all CUDA Toolkit and Driver packages. Handles upgrading to the next version of the cuda package when it's released.
# cuda-9-0                Installs all CUDA Toolkit and Driver packages. Remains at version 9.0 until an additional version of CUDA is installed.
# cuda-toolkit-9-0        Installs all CUDA Toolkit packages required to develop CUDA applications. Does not include the driver.
# cuda-runtime-9-0        Installs all CUDA Toolkit packages required to run CUDA applications, as well as the Driver packages.
# cuda-libraries-9-0      Installs all runtime CUDA Library packages.
# cuda-libraries-dev-9-0  Installs all development CUDA Library packages.
# cuda-drivers	          Installs all Driver packages. Handles upgrading to the next version of the Driver packages when they're released.

# [CUDA 8.0 META PACKAGES]
# cuda	                  Installs all CUDA Toolkit and Driver packages. Handles upgrading to the next version of the cuda package when it's released.
# cuda-8-0                Installs all CUDA Toolkit and Driver packages. Remains at version 8.0 until an additional version of CUDA is installed.
# cuda-toolkit-8-0        Installs all CUDA Toolkit packages required to develop CUDA applications. Does not include the driver.
# cuda-runtime-8-0        Installs all CUDA Toolkit packages required to run CUDA applications, as well as the Driver packages.
# cuda-drivers	          Installs all Driver packages. Handles upgrading to the next version of the Driver packages when they're released.

export VERSION=10.0
export LOCAL_REPOSITORY='yes'
export PLATFORM='ubuntu1604'
export IP=$(ip route get 8.8.8.8 | head -1 | cut -d" " -f8)
export INSTALL_DRIVER='no'

#http://www.dreamsyssoft.com/unix-shell-scripting/ifelse-tutorial.php
if [[ "$#" -gt 0 ]];then
  VERSION="$1"
  
  if [[ "$#" -gt 1 ]];then
    LOCAL_REPOSITORY="$2"
  fi

  #if [[ "$#" -gt 2 ]];then
  #  INSTALL_DRIVER="$3"
  #fi

  #TODO: future implementation of 'ubuntu' and 'rhel'
  if [[ "$#" -gt  2 ]];then
    PLATFORM="$3"
  fi
  
fi

echo "     __        _     _ _               ___          _        ";
echo "  /\ \ \__   _(_) __| (_) __ _        / __\   _  __| | __ _  ";
echo " /  \/ /\ \ / / |/ _\` | |/ _\` |_____ / / | | | |/ _\` |/ _\` | ";
echo "/ /\  /  \ V /| | (_| | | (_| |_____/ /__| |_| | (_| | (_| | ";
echo "\_\ \/    \_/ |_|\__,_|_|\__,_|     \____/\__,_|\__,_|\__,_| ";
echo "                                                             ";

RESET='\033[0m'
COLOR='\033[1;32m'

msg() {
  echo -e "${COLOR}$(date): $1${RESET}"
}

install_nginx() {

  if [[ ${LOCAL_REPOSITORY} == 'yes' ]]; then
    
    msg "Installing Repository Server Host (NGINX)"
    sudo apt update  -qq
    sudo apt install -qqy --no-install-recommends nginx 
    cat <<EOF | sudo tee /etc/nginx/sites-available/nvidia
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  root /var/www/repository;
  #index index.html index.htm index.nginx-debian.html;
  server_name _;

  #Fix for nvidia-repository
  rewrite ^(.*)[\+](.*)$ \$1%20\$2 permanent;
  location / {
    try_files \$uri \$uri/ =404;
    autoindex on;
  }
}
EOF

    sudo ln -s -f /etc/nginx/sites-available/nvidia /etc/nginx/sites-enabled/default
    sudo ln -s -f /repository /var/www/repository
    sudo systemctl restart nginx

    msg "Fixing internal nslookup for locahost"
    echo "127.0.0.1	developer.download.nvidia.com" | sudo tee -a /etc/hosts

  fi
}

register_remote_repository() {

  #RedHat Enterprise 7
  #echo 'deb http://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64 /' | sudo tee /etc/apt/sources.list.d/cuda-local.list
  #Ubuntu 18.04
  #echo 'deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /' | sudo tee /etc/apt/sources.list.d/cuda-local.list
  #Ubuntu 16.04
  sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/${PLATFORM}/x86_64/7fa2af80.pub
  echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/${PLATFORM}/x86_64 /" | sudo tee /etc/apt/sources.list.d/machine-learning-local.list
  echo "deb http://developer.download.nvidia.com/compute/cuda/repos/${PLATFORM}/x86_64 /"             | sudo tee /etc/apt/sources.list.d/cuda-local.list

  #if [[ ${INSTALL_DRIVER} == 'yes' ]];then
  #  install_driver;
  #fi
}

install_cuda_packages() {

  sudo apt update -qq
  if [[ ${VERSION} == "10.0" ]];then

    msg "Installing Cuda Toolkit ${VERSION}"
    sudo apt install -qqy --allow-unauthenticated --no-install-recommends \
            cuda-compat-10-0=410.48-1 \
            cuda-visual-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-samples-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-documentation-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-toolkit-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvml-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvtx-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-minimal-build-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cupti-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-command-line-tools-$CUDA_VERSION=${CUDA_PKG_VERSION} \
            libnccl2=${NCCL_VERSION}-2+cuda${CUDA_PKG_NCCL_VERSION} \
            libnccl-dev=${NCCL_VERSION}-2+cuda${CUDA_PKG_NCCL_VERSION} \
            cuda-nvcc-${CUDA_VERSION} 
            
            #cuda-compat-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            #cuda-${CUDA_VERSION}=${CUDA_PKG_VERSION}

  elif [[ ${VERSION} == "9.2" ]];then
    
    msg "Installing Cuda Toolkit ${VERSION}"
    sudo apt install -qqy --allow-unauthenticated --no-install-recommends \
            cuda-visual-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-samples-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-documentation-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-toolkit-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvml-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvtx-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-minimal-build-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cupti-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-command-line-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            libnccl2=${NCCL_VERSION}-2+cuda${CUDA_PKG_NCCL_VERSION} \
            libnccl-dev=${NCCL_VERSION}-2+cuda${CUDA_PKG_NCCL_VERSION} \
            cuda-nvcc-${CUDA_VERSION} 
            
            #cuda-$CUDA_VERSION=$CUDA_PKG_VERSION

  elif [[ ${VERSION} == "9.1" ]];then

    msg "Installing Cuda Toolkit ${VERSION}"
    sudo apt install -qqy --allow-unauthenticated --no-install-recommends \
            cuda-toolkit-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvml-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvtx-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-minimal-build-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-command-line-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            libnccl2=${NCCL_VERSION}-1+cuda${CUDA_PKG_NCCL_VERSION} \
            libnccl-dev=${NCCL_VERSION}-1+cuda${CUDA_PKG_NCCL_VERSION} \
            cuda-nvcc-${CUDA_VERSION} 
            
            #cuda-$CUDA_VERSION=$CUDA_PKG_VERSION

    #its not a certified repository so need to be installed manually
    #dpkg -i /var/nccl-repo-2.2.12-ga-cuda9.1/libnccl2_${NCCL_VERSION}'-1+cuda'${CUDA_PKG_NCCL_VERSION}_amd64.deb
    #dpkg -i /var/nccl-repo-2.2.12-ga-cuda9.1/libnccl-dev_${NCCL_VERSION}'-1+cuda'${CUDA_PKG_NCCL_VERSION}_amd64.deb

  elif [[ ${VERSION} == "9.0" ]];then

    msg "Installing Cuda Toolkit ${VERSION}"
    sudo apt install -qqy --allow-unauthenticated --no-install-recommends \
            cuda-toolkit-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-libraries-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-core-9-0=9.0.176.3-1 \
            cuda-cublas-9-0=9.0.176.4-1 \
            cuda-cublas-dev-9-0=9.0.176.4-1 \
            cuda-nvml-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-minimal-build-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-command-line-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            libnccl2=${NCCL_VERSION}-2+cuda${CUDA_PKG_NCCL_VERSION} \
            libnccl-dev=${NCCL_VERSION}-2+cuda${CUDA_PKG_NCCL_VERSION} 
            
            #cuda-$CUDA_VERSION=${CUDA_PKG_VERSION}

  elif [[ ${VERSION} == "8.0" ]];then

    msg "Installing Cuda Toolkit ${VERSION}"
    sudo apt install -qqy --allow-unauthenticated --no-install-recommends \
            cuda-toolkit-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvrtc-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvrtc-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvgraph-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvgraph-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cusolver-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cusolver-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cublas-8-0=8.0.61.2-1 \
            cuda-cublas-dev-8-0=8.0.61.2-1 \
            cuda-cufft-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cufft-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-curand-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-curand-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cusparse-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cusparse-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-npp-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-npp-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-cudart-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-core-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-misc-headers-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-command-line-tools-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-nvml-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-driver-dev-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            cuda-minimal-build-${CUDA_VERSION}=${CUDA_PKG_VERSION} \
            libnccl2=${NCCL_VERSION}-1+cuda${CUDA_PKG_NCCL_VERSION} \
            libnccl-dev=${NCCL_VERSION}-1+cuda${CUDA_PKG_NCCL_VERSION} 
            
            #cuda-$CUDA_VERSION=${CUDA_PKG_VERSION}

    # Bazel may not find this file so I created a symlink
    # cd /usr/local/cuda-8.0/nvvm/libdevice
    # sudo ln -s libdevice.compute_50.10.bc libdevice.10.bc
    sudo ln -s /usr/local/cuda-8.0/nvvm/libdevice/libdevice.compute_30.10.bc /usr/local/cuda-8.0/nvvm/libdevice/libdevice.10.bc

  fi

  echo 'export VERSION=${VERSION}' | tee -a $HOME/.bashrc
}

install_cuda_10_0() {

  export CUDA_VERSION=10-0
  export CUDA_PKG_VERSION=10.0.130-1
  export CUDA_PKG_NCCL_VERSION=10.0
  export CUDA_VERSION_=10.0
  export NCCL_VERSION=2.3.5
  #export NCCL_VERSION=2.3.4

  register_remote_repository;

  install_cuda_packages;
}

install_cuda_9_2() {

  export CUDA_VERSION=9-2
  export CUDA_PKG_VERSION=9.2.148-1
  export CUDA_PKG_NCCL_VERSION=9.2
  export CUDA_VERSION_=9.2
  export NCCL_VERSION=2.3.5
  #export NCCL_VERSION=2.3.4

  register_remote_repository;

  install_cuda_packages;
}

install_cuda_9_1() {

  export CUDA_VERSION=9-1
  export CUDA_PKG_VERSION=9.1.85-1
  export CUDA_PKG_NCCL_VERSION=9.1
  export CUDA_VERSION_=9.1
  export NCCL_VERSION=2.1.15

  register_remote_repository;    

  install_cuda_packages;
}

install_cuda_9_0() {

  export CUDA_VERSION=9-0
  export CUDA_PKG_VERSION=9.0.176-1
  export CUDA_PKG_NCCL_VERSION=9.0
  export CUDA_VERSION_=9.0
  export NCCL_VERSION=2.3.5
  #export NCCL_VERSION=2.3.4

  register_remote_repository;

  install_cuda_packages;
}

install_cuda_8_0() {

  export CUDA_VERSION=8-0
  export CUDA_PKG_VERSION=8.0.61-1
  export CUDA_PKG_NCCL_VERSION=8.0
  export CUDA_VERSION_=8.0
  export NCCL_VERSION=2.2.13

  register_remote_repository;

  install_cuda_packages;
}

install_cuda() {

  if [[ ${VERSION} == "8.0" ]];
  then
    install_cuda_8_0;
  elif [[ ${VERSION} == "9.0" ]];
  then
    install_cuda_9_0;
  elif [[ ${VERSION} == "9.1" ]];
  then
    install_cuda_9_1;
  elif [[ ${VERSION} == "9.2" ]];
  then
    install_cuda_9_2;
  elif [[ ${VERSION} == "10.0" ]];then
    install_cuda_10_0;
  fi
}

register_libraries_path() {

  msg "Registering Paths and Libraries"
  # PATH for CUDA
  # LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64
  # LIBRARY_PATH /usr/local/cuda/lib64/stubs
  export PATH=/usr/local/cuda/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
  export LIBRARY_PATH=/usr/local/cuda/lib64/stubs
  export CUPIT_LIB_PATH=/usr/local/cuda/extras/CUPTI/lib64/
  export LD_LIBRARY_PATH=${CUPIT_LIB_PATH}:$LD_LIBRARY_PATH
  
  echo '# [Cuda]' | tee -a ${HOME}/.bashrc
  echo 'export PATH=/usr/local/cuda/bin:${PATH:+:${PATH}}' | tee -a ${HOME}/.bashrc
  echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' | tee -a ${HOME}/.bashrc
  echo 'export LIBRARY_PATH=/usr/local/cuda/lib64/stubs' | tee -a ${HOME}/.bashrc
  echo 'export CUPIT_LIB_PATH=/usr/local/cuda/extras/CUPTI/lib64/' | tee -a ${HOME}/.bashrc
  echo 'export LD_LIBRARY_PATH=${CUPIT_LIB_PATH}:${LD_LIBRARY_PATH}' | tee -a ${HOME}/.bashrc
  #chown ubuntu:ubuntu ${HOME}/.bashrc

}

install_cudnn7() {

  msg "Installing CuDNN"
  if [[ ${VERSION} == "9.0" || ${VERSION} == "9.2" || ${VERSION} == "10.0" ]];then
    # compatible with 9.0 and 10.0
    export CUDNN_PKG_VERSION=7.3.1.20
  elif [[ ${VERSION} == "8.0" ]]; then
    # compatible with 8.0 and 9.2
    export CUDNN_PKG_VERSION=7.2.1.38
  elif [[ ${VERSION} == "9.1" ]]; then
    # compatible with 9.1
    export CUDNN_PKG_VERSION=7.1.3.16
  fi
  
    sudo apt install -qqy --no-install-recommends \
                      libcudnn7=${CUDNN_PKG_VERSION}-1+cuda${VERSION} \
                      libcudnn7-dev=${CUDNN_PKG_VERSION}-1+cuda${VERSION}
}

install_nginx;
install_cuda;
register_libraries_path;
install_cudnn7;