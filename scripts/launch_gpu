#!/bin/bash -e

export MACHINE_CONTAINER=cuda10;
export USE_GPU='yes'
export LOCAL_REPOSITORY='yes'
export MACHINE_BASE="ubuntu:16.04";
export CUDA_VERSION=10.0;

export BACKUPS_FOLDER=;
export FRAMEWORKS_FOLDER=;
export REPOSITORY_FOLDER=;
export PROJECTS_FOLDER=;
export SCRIPTS_FOLDER=;
export UTILS_FOLDER=;
export SHARED_FOLDER=;
export NVIDIA_REPO_LOCAL=;
export NVIDIA_REPO_MIRROR=;

RESET='\033[0m';
COLOR='\033[1;32m';
msg() {
  echo -e "${COLOR}$(date): $1${RESET}";
}

launch() {

    msg "Launching container: ($MACHINE_CONTAINER), cuda version: ($CUDA_VERSION), linux version: ($MACHINE_BASE)";
    msg "Defining maps"
    lxc launch $MACHINE_BASE $MACHINE_CONTAINER -c raw.idmap="both $UID 1000"
    lxc config set $MACHINE_CONTAINER limits.cpu 3;

    # Packages SDKs (DAAL / KML / IPP / TBB / MPI)
    lxc config device add $MACHINE_CONTAINER frameworks  disk source=$FRAMEWORKS_FOLDER         path=/frameworks;
    lxc config device add $MACHINE_CONTAINER projects    disk source=$PROJECTS_FOLDER           path=/projects;
    lxc config device add $MACHINE_CONTAINER scripts     disk source=$SCRIPTS_FOLDER            path=/scripts;
    lxc config device add $MACHINE_CONTAINER utils       disk source=$UTILS_FOLDER              path=/utils;
    lxc config device add $MACHINE_CONTAINER shared      disk source=$SHARED_FOLDER             path=/shared;
    lxc config device add $MACHINE_CONTAINER python      disk source=$REPOSITORY_FOLDER/python  path=/var/python-repo-local
    lxc stop $MACHINE_CONTAINER
    
    if [[ $USE_GPU == 'yes' ]];then

      lxc config device add $MACHINE_CONTAINER gtx gpu;
      lxc config set $MACHINE_CONTAINER nvidia.runtime true
      lxc config set $MACHINE_CONTAINER nvidia.driver.capabilities "all";
      lxc config set $MACHINE_CONTAINER nvidia.require.driver ">=340";
      lxc config set $MACHINE_CONTAINER nvidia.require.cuda "cuda>=$CUDA_VERSION";
      lxc config show $MACHINE_CONTAINER | sed "s/^description:.*/description: cuda-$CUDA_VERSION/" | lxc config edit $MACHINE_CONTAINER;

      #NVIDIA-MIRROR-REPOSITORY
      if [[ $LOCAL_REPOSITORY == 'yes' ]];then
        lxc config device add $MACHINE_CONTAINER nvidia-repository  disk  source=$NVIDIA_REPO_MIRROR_FOLDER  path=/repository
      fi
    fi
    lxc start $MACHINE_CONTAINER
    sleep 10s;
}

#verify_install 'base' '/projects/_lxc/console/base.sh' 
configure() 
{
  if [[ "$(sudo zfs list -t snapshot | grep $MACHINE_CONTAINER@snapshot-$1 2> /dev/null)" == "" ]]; then
    lxc exec $MACHINE_CONTAINER -- su ubuntu -c "$2";
    lxc snapshot $MACHINE_CONTAINER "$1";
  else
     msg "Skipping snapshot ($1)"
  fi
}

build_container() 
{
  msg "Starting configuration ($MACHINE_CONTAINER)...";
  if [[ "$(sudo zfs list -t snapshot | grep $MACHINE_CONTAINER@snapshot-zero 2> /dev/null)" == "" ]]; then
    #lxc exec $MACHINE_CONTAINER -- bash -c 'echo "127.0.0.1	localhost" | tee -a /etc/hosts'
    lxc exec $MACHINE_CONTAINER -- bash -c 'echo "127.0.1.1	$(hostname)" | tee -a /etc/hosts';
    lxc exec $MACHINE_CONTAINER -- su ubuntu -c 'echo "export HOSTNAME_PREFIX=cuda" | tee -a /home/ubuntu/.bashrc';
    lxc exec $MACHINE_CONTAINER -- su ubuntu -c 'echo "export HOSTNAME_PREFIX=cuda" | tee -a /home/ubuntu/.profile';
    lxc exec $MACHINE_CONTAINER -- su ubuntu -c "echo 'export VERSION=$CUDA_VERSION' | tee -a /home/ubuntu/.bashrc";
    lxc exec $MACHINE_CONTAINER -- su ubuntu -c "echo 'export VERSION=$CUDA_VERSION' | tee -a /home/ubuntu/.profile";
    lxc exec $MACHINE_CONTAINER -- su ubuntu -c 'echo "export DISPLAY=:0" | tee -a $HOME/.bashrc';
    lxc exec $MACHINE_CONTAINER -- su ubuntu -c 'echo "export DISPLAY=:0" | tee -a $HOME/.profile';
    lxc exec $MACHINE_CONTAINER -- bash -c 'echo export JUPYTER_IP="\$(ip route get 8.8.8.8 | head -1 | cut -d\" \" -f8)" | tee -a /home/ubuntu/.bashrc';
    lxc exec $MACHINE_CONTAINER -- bash -c 'echo export JUPYTER_IP="\$(ip route get 8.8.8.8 | head -1 | cut -d\" \" -f8)" | tee -a /home/ubuntu/.profile';

    msg "Configure the password for user 'ubuntu' on container ($MACHINE_CONTAINER).";
    lxc exec $MACHINE_CONTAINER -- bash -c 'passwd ubuntu';
    lxc exec $MACHINE_CONTAINER -- bash -c 'nvidia-smi';
    lxc snapshot $MACHINE_CONTAINER zero
  else
    msg "Skipping..."
  fi
  
  configure "base" "/scripts/base"
  configure "cuda" "/scripts/cuda $CUDA_VERSION $LOCAL_REPOSITORY"
  configure "python3" "/scripts/python3 3.6"
  configure "nodejs" "/scripts/nodejs"
  configure "jupyterlab" "/scripts/jupyterlab"
  configure "r" "/scripts/r"
  configure "octave" "/scripts/octave"
  configure "javascript" "/scripts/javascript"
  configure "julia" "/scripts/julia"
  configure "cloud9" "/scripts/cloud9"
}

post_build() 
{
    msg "Setting external GUI Infrastruture"
    if [[ "$(sudo zfs list -t snapshot | grep $MACHINE_CONTAINER@snapshot-zero 2> /dev/null)" == "" ]]; then
      lxc config device add $MACHINE_CONTAINER X0          disk source=/tmp/.X11-unix/X0  path=/tmp/.X11-unix/X0
      lxc config device add $MACHINE_CONTAINER Xauthority  disk source=${XAUTHORITY}      path=/home/ubuntu/.Xauthority
    fi
}

process()
{
    #If container evet get online once it must have this snapshot
    if [[ "$(sudo zfs list -t snapshot | grep $MACHINE_CONTAINER@snapshot-zero 2> /dev/null)" == "" ]]; then
        launch;
    fi

    build_container;
    post_build;

    msg "Container ($MACHINE_CONTAINER) is ready to be used.";
    msg "If nothing was done, then the container already exists";
}

if [[ "$#" -gt 0 ]]; then
    MACHINE_CONTAINER="$1";
  if [[ "$#" -gt 1 ]]; then
    CUDA_VERSION="$2"
  fi

  if [[ "$#" -gt 2 ]];then
    MACHINE_BASE="$3"
  fi
  
  process;
  
else

  echo "Cotainers until now:"
  lxc ls;
  echo ""
  echo "What the name of container to use? [default=$MACHINE_CONTAINER]:"
  read _NAME_
  if [[ "$_NAME_" != "" ]];then
    MACHINE_CONTAINER=$_NAME_
  fi
  msg "Container name: [$MACHINE_CONTAINER]"
  
  echo ""
  echo "Need GPU acceleration? (yes/no) [default=$USE_GPU]:"
  echo "If typed incorrectly the default will be used"
  read _GPU_ACCELERATION_
  if [[ "$_GPU_ACCELERATION_" == 'no' ]];then
    USE_GPU=$_GPU_ACCELERATION_
  fi
  msg "Using GPU acceleration: [$USE_GPU]"

  echo ""
  echo "What desired CUDA version? (8.0, 9.0, 9.1, 9.2, 10.0) [default=$CUDA_VERSION]:"
  echo "If typed incorrectly the default will be used"
  read _VERSION_
  if [[ $_VERSION_ == "8.0" || $_VERSION_ == "9.0" || $_VERSION_ == "9.1" || $_VERSION_ == "9.2" || $_VERSION_ == "10.0" ]];then
    CUDA_VERSION=$_VERSION_
  fi
  msg "Cuda version: [$CUDA_VERSION]"
  
  echo ""
  echo "use LOCAL repository? (yes/no) [default=$LOCAL_REPOSITORY]"
  read _LOCAL_
  if [[ $_LOCAL_ == 'no' ]]; then
    LOCAL_REPOSITORY=$_LOCAL_
  fi
  msg "Using Local Repository: [$LOCAL_REPOSITORY]"

  echo ""
  echo "Type the Linux version platform [default=$MACHINE_BASE]"
  echo "If you don't know use this in another terminal: "
  echo "lxc image list [<remote>:]"
  read _PLATFORM_
  if [[ "$_PLATFORM_" != "" ]];then
    MACHINE_BASE=$_PLATFORM_
  fi
  msg "platform to use: [$MACHINE_BASE]"
  process;

fi